name: Build SSC30KQ LTE Firmware

on:
  push:
    branches: [ master, lte-support ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable debug mode'
        required: false
        default: false

env:
  BOARD: ssc30kq
  VARIANT: lte

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          automake autotools-dev bc build-essential \
          curl fzf git libtool rsync unzip mc tree \
          python-is-python3 wget cpio zip \
          libncurses-dev u-boot-tools

    - name: Cache Buildroot downloads
      uses: actions/cache@v4
      with:
        path: ~/buildroot_dl
        key: ${{ runner.os }}-buildroot-dl-${{ hashFiles('**/configs/*_defconfig') }}
        restore-keys: |
          ${{ runner.os }}-buildroot-dl-

    - name: Cache Buildroot build
      uses: actions/cache@v4
      with:
        path: |
          output/
          build/
        key: ${{ runner.os }}-build-${{ env.BOARD }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.BOARD }}-

    - name: Setup environment variables
      run: |
        echo "BR2_DL_DIR=$HOME/buildroot_dl" >> $GITHUB_ENV
        mkdir -p $HOME/buildroot_dl

    - name: Apply LTE patches
      run: |
        # Створюємо LTE конфігурацію
        cp br-ext-chip-sigmastar/configs/ssc30kq_lite_sigmastar_defconfig \
           br-ext-chip-sigmastar/configs/ssc30kq_lte_sigmastar_defconfig
        
        # Додаємо LTE пакети
        cat >> br-ext-chip-sigmastar/configs/ssc30kq_lte_sigmastar_defconfig << 'EEOF'
        BR2_PACKAGE_USB_MODESWITCH=y
        BR2_PACKAGE_USB_MODESWITCH_DATA=y
        BR2_PACKAGE_PPP=y
        BR2_PACKAGE_CHAT=y
        BR2_PACKAGE_PICOCOM=y
        BR2_PACKAGE_SOCAT=y
        EEOF

    - name: Configure kernel for USB support
      run: |
        # Додаємо USB драйвери в kernel config
        cat >> br-ext-chip-sigmastar/board/infinity6b0/kernel/ssc30kq.generic.config << 'EEOF'
        CONFIG_USB_SUPPORT=y
        CONFIG_USB=y
        CONFIG_USB_EHCI_HCD=y
        CONFIG_USB_OHCI_HCD=y
        CONFIG_USB_STORAGE=y
        CONFIG_USB_SERIAL=y
        CONFIG_USB_SERIAL_OPTION=y
        CONFIG_USB_SERIAL_WWAN=y
        CONFIG_USB_NET_DRIVERS=y
        CONFIG_USB_USBNET=y
        CONFIG_USB_NET_CDC_NCM=y
        CONFIG_USB_NET_HUAWEI_CDC_NCM=y
        CONFIG_USB_NET_CDC_ETHER=y
        CONFIG_USB_NET_RNDIS_HOST=y
        CONFIG_USB_ACM=y
        CONFIG_PPP=y
        CONFIG_PPP_ASYNC=y
        CONFIG_PPP_SYNC_TTY=y
        CONFIG_PPP_DEFLATE=y
        CONFIG_PPP_BSDCOMP=y
        EEOF

    - name: Create LTE init scripts
      run: |
        mkdir -p br-ext-chip-sigmastar/board/infinity6b0/overlay/etc/init.d
        mkdir -p br-ext-chip-sigmastar/board/infinity6b0/overlay/etc/usb_modeswitch.d
        
        # Init script
        cat > br-ext-chip-sigmastar/board/infinity6b0/overlay/etc/init.d/S99lte << 'EEOF'
        #!/bin/sh
        
        start() {
            echo "Starting LTE modem support..."
            
            # Enable USB power on GPIO 10 for SSC30KQ
            if [ ! -d /sys/class/gpio/gpio10 ]; then
                echo 10 > /sys/class/gpio/export
            fi
            echo out > /sys/class/gpio/gpio10/direction
            echo 1 > /sys/class/gpio/gpio10/value
            
            # Wait for USB enumeration
            sleep 3
            
            # Check for Huawei modem
            if lsusb | grep -q "12d1:1f01"; then
                echo "Huawei E3372h detected, switching to NCM mode..."
                usb_modeswitch -v 12d1 -p 1f01 -M "55534243123456780000000000000011063000000101000100000000000000"
                sleep 2
            fi
            
            # Configure network interface
            for i in $(seq 0 5); do
                if [ -d /sys/class/net/usb$i ]; then
                    echo "Configuring usb$i..."
                    ifconfig usb$i up
                    udhcpc -i usb$i -b
                    break
                fi
            done
        }
        
        stop() {
            echo "Stopping LTE modem support..."
            killall udhcpc 2>/dev/null
            echo 0 > /sys/class/gpio/gpio10/value
        }
        
        case "$1" in
            start) start ;;
            stop) stop ;;
            restart) stop; start ;;
            *) echo "Usage: $0 {start|stop|restart}"; exit 1 ;;
        esac
        EEOF
        
        chmod +x br-ext-chip-sigmastar/board/infinity6b0/overlay/etc/init.d/S99lte

    - name: Build firmware
      run: |
        make BOARD=ssc30kq VARIANT=lte sigmastar_defconfig
        make

    - name: Prepare artifacts
      run: |
        # Створюємо директорію для артефактів
        mkdir -p release
        
        # Копіюємо прошивку
        cp output/images/* release/ 2>/dev/null || true
        
        # Створюємо README
        cat > release/README.md << 'EEOF'
        # SSC30KQ LTE Firmware
        
        ## Version Info
        - Build Date: $(date)
        - Git Commit: ${{ github.sha }}
        - Branch: ${{ github.ref_name }}
        
        ## Features
        - USB host support enabled
        - Huawei E3372h modem support
        - CDC NCM driver included
        - USB modeswitch configured
        - GPIO 10 configured for USB power
        
        ## Installation
        1. Connect UART to camera
        2. Set up TFTP server
        3. Flash using U-Boot:
        ```
        setenv serverip YOUR_TFTP_IP
        setenv ipaddr CAMERA_IP
        run sysupgrade
        ```
        
        ## LTE Setup
        Modem should be detected automatically after boot.
        Check status: `ifconfig -a`
        EEOF

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ssc30kq-lte-firmware-${{ github.sha }}
        path: release/
        retention-days: 30

    - name: Create release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        body_path: release/README.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
